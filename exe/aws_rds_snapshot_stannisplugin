#!/usr/bin/env ruby

require "aws_rds_snapshot_stannisplugin"
require "optparse"

options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: aws_rds_snapshot_stannisplugin [options]"

  opts.on("-c", "--config CONFIG", "Path to configuration file") do |c|
    options[:config] = c
  end

  opts.separator ""
  opts.separator "Common options:"
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on("--version", "Show version") do |v|
    puts "aws_rds_snapshot_stannisplugin #{Stannis::Plugin::AwsRdsSnapshot::VERSION}"
    exit 0
  end
end

opts.parse!(ARGV)
unless options[:config]
  puts opts
  exit 1
end

def err(msg)
  $stderr.puts msg
  exit 1
end

config = Stannis::Plugin::AwsRdsSnapshot::Config.load_file(options[:config])

config.deployments.each do |deployment|
  unless deployment["rds"] && deployment["rds"].is_a?(Array)
    err "Missing config: deployments[].rds[] - #{deployment.inspect}"
  end
  unless (bosh_really_uuid = deployment["bosh_really_uuid"]) &&
    (deployment_name = deployment["deployment_name"]) &&
    (label = deployment["label"])
    err "Required deployment config: bosh_really_uuid, deployment_name, label"
  end

  data = deployment["rds"].map do |rds_snapshots|
    instance_id = rds_snapshots["instance_id"]
    status = Stannis::Plugin::AwsRdsSnapshot::Status.new(config.fog_rds, instance_id)
    snapshot = status.latest_snapshot
    status.stannis_data(snapshot)
  end
  upload_data = {
    "reallyuuid" => bosh_really_uuid,
    "deploymentname" => deployment_name,
    "label" => label,
    "data" => data
  }.to_json

  config.stannis.upload_deployment_data(bosh_really_uuid, deployment_name, label, upload_data)
end
